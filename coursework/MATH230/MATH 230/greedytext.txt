#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#define ROWS  5
#define COLS  6
void calcSums(int topog[ROWS][COLS], int sumList[ROWS] );
int main()
{
	int topography[ROWS][COLS] =
		{
			{ 3011, 3007, 2852, 2808, 2791, 2818 },
			{ 2972, 2937, 2886, 2860, 2830, 2748 },
			{ 2937, 2959, 2913, 2864, 2791, 2742 },
			{ 2999, 2888, 2986, 2910, 2821, 2754 },
			{ 2909, 3816, 2863, 2997, 2962, 2798 }	};
	int sumList[ROWS] = {0}; //initializes all sums to zero
	int r;
	/*  student to implement calcSums */
	calcSums(topography, sumList ); //pass in topography, get back list of elevation sums
	for(r = 0; r < ROWS; r++)
		printf("%8d %8d \n",r, sumList[r]);  //should display calculated sums
	return 0;
}
/*
 *  Receives 2d matrix that represents topography
 *  and uses this data to calculate an elevation path sum for each
 *  row.
 *  Input:  topog[][]
 *  Output: sum[]
 */
void calcSums(int topog[ROWS][COLS], int sums[ROWS] )
{
    int z = 0;
    int h = 0;
    int i;
    int j = 0;
    int firstchoice,secondchoice,thirdchoice;
    int rowval = 0;
    int coinflip;
    while( j != ROWS )
    {
        for(i  = 0; i != COLS; i++)
        {
            firstchoice = abs(topog[j - 1][i + 1] - topog[j][i] );

            secondchoice = abs(topog[j + 1][i + 1] - topog[j][i] );

            thirdchoice = abs(topog[j][i + 1] - topog [j][i] );

            if( firstchoice < secondchoice && firstchoice < thirdchoice )

                z = j - 1;

            else if( secondchoice < firstchoice && secondchoice < thirdchoice )

                z = j + 1;

            else if( thirdchoice < firstchoice && thirdchoice < secondchoice )

                z = j;

            else if ( thirdchoice == firstchoice || thirdchoice == secondchoice)

                z = j;

            else if(firstchoice == secondchoice)
            {
                coinflip = rand() % 2;
                if( coinflip == 0)

                    z = j - 1;

                else

                    z = j + 1;


            }

            if( z = j - 1  )

                sums[rowval] += firstchoice;

            else if(z = j + 1 )

                sums[rowval] += secondchoice;

            else if( z = j )

                sums[rowval] += thirdchoice;


        j = z;
        }
    rowval++;
    h++;
    j = h;
    }

}
