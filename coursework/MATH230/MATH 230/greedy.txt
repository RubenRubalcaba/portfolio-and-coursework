/*
Ruben Rubalcaba
Instructor: Professor Mimi Rasky
Lab #5
Math 230-03
October 17 2019
*/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#define ROWS  5
#define COLS  6
void calcSums(int topog[ROWS][COLS], int sumList[ROWS] );
int main()
{
	int topography[ROWS][COLS] =
		{
			{ 3011, 3007, 2852, 2808, 2791, 2818 },
			{ 2972, 2937, 2886, 2860, 2830, 2748 },
			{ 2937, 2959, 2913, 2864, 2791, 2742 },
			{ 2999, 2888, 2986, 2910, 2821, 2754 },
			{ 2909, 3816, 2863, 2997, 2962, 2798 }	};
	int sumList[ROWS] = {0}; //initializes all sums to zero
	int r;
	/*  student to implement calcSums */
	calcSums(topography, sumList ); //pass in topography, get back list of elevation sums
	for(r = 0; r < ROWS; r++)
		printf("%8d %8d \n",r, sumList[r]);  //should display calculated sums
	return 0;
}
/*
 *  Receives 2d matrix that represents topography
 *  and uses this data to calculate an elevation path sum for each
 *  row.
 *  Input:  topog[][]
 *  Output: sum[]
 */
void calcSums(int topog[ROWS][COLS], int sums[ROWS] )
{
    int nextrow = 0;
    int rowval, col, coinflip;
    int top_row = 0;
    int middle_row = 0;
    int bottom_row = 0;
    int r = 0;
    srand(time(NULL));
    for(rowval = 0; rowval < ROWS; rowval++)
    {

        for(col = 0; col < COLS - 1; col++)
        {

           //If statement to begin at first row
           if( rowval == 0 )
           {
            //absolute value function calculating middle row difference
            middle_row = abs(topog[rowval][col + 1] - topog [rowval][col]);

            bottom_row = abs(topog[rowval + 1][col + 1] - topog[rowval][col]);
               if(middle_row < bottom_row)

                    nextrow = rowval;


               else if(bottom_row < middle_row)

                   nextrow  = rowval + 1;


               else if(middle_row == bottom_row)

                   nextrow = rowval;



           }
           //If statement for any non-top or bottom row start.
           else if( rowval != ROWS - 1)
           {
               top_row = abs(topog[rowval - 1][col + 1] - topog[rowval][col] );

               middle_row = abs(topog[rowval][col + 1] - topog [rowval][col]);

               bottom_row = abs(topog[rowval + 1][col + 1] - topog[rowval][col] );

               if(top_row < middle_row && top_row < bottom_row)

                   nextrow = rowval - 1;

               else if(bottom_row < top_row && bottom_row < middle_row)

                   nextrow = rowval + 1;

               else if(middle_row < top_row && middle_row < bottom_row)

                   nextrow = rowval;

               else if(middle_row == top_row || middle_row == bottom_row)

                   nextrow = rowval;

               else if(top_row == bottom_row)
               {
                   //Coin flip using rand and modulo function
                   coinflip = rand() % 2;
                   //Random remainder picks either the top row or bottom
                   if(coinflip == 0 )

                       nextrow = rowval - 1;

                   else

                       nextrow = rowval + 1;

               }



           }
           //Else if starting at bottom row
           else if( rowval == ROWS - 1)
           {
               top_row = abs(topog[rowval - 1][col + 1] - topog[rowval][col] );

               middle_row = abs(topog[rowval][col + 1] - topog [rowval][col]);

               if(top_row < middle_row)

                   nextrow = rowval - 1;

               else if (middle_row < top_row)

                   nextrow = rowval;

               else if(middle_row == top_row)

                   nextrow = rowval;


           }
           //Add statement for each row to be added into array of sums
           if( nextrow == rowval)

               sums[r] += middle_row;

           else if(nextrow == rowval - 1 )

               sums[r] += top_row;

           else if(nextrow == rowval + 1)

               sums[r] += bottom_row;

           // rowval moves to what row was picked
           rowval = nextrow;

        }
        //rowval goes back to next starting row
        rowval = r;
        //Increment to next position in the next sum row
        r++;

    }

}
